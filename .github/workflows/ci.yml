name: Compiler

on:
  push:
    paths:
      - '.github/workflows/android.yml'
      - 'app/**'
      - 'gradle/**'
      - 'build.gradle'
      - 'gradle.properties'
      - 'gradlew'
      - 'gradlew.bat'
      - 'public-stable-ids.txt'
      - 'settings.gradle'
    branches-ignore:
      - 'wip/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug or release)'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
      confirm:
        description: 'Confirm you want to run this build (type YES to confirm)'
        required: true
        default: 'NO'
      whats_new:
        description: 'What's new in this release (for release builds only)'
        required: false
        default: ''

jobs:
  validate_inputs:
    name: Validate Inputs
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.validate.outputs.should_continue }}
      build_type: ${{ github.event.inputs.build_type }}
      whats_new: ${{ github.event.inputs.whats_new }}
    steps:
      - name: Validate Confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "YES" ]; then
            echo "Build cancelled - confirmation not received"
            echo "should_continue=false" >> $GITHUB_OUTPUT
          else
            echo "should_continue=true" >> $GITHUB_OUTPUT
          fi

  notifyTelegram:
    name: Notify Telegram
    if: ${{ github.event_name != 'workflow_dispatch' || needs.validate_inputs.outputs.should_continue == 'true' }}
    runs-on: ${{ vars.IS_USING_HOSTED_RUNNERS == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install requests

      - name: Send a message to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TOPIC_ID: ${{ secrets.TELEGRAM_TOPIC_ID }}
        run: |
          python ./.github/workflows/notify_telegram.py
        continue-on-error: true

  build:
    name: Build APKs
    needs: validate_inputs
    if: ${{ github.event_name != 'workflow_dispatch' || needs.validate_inputs.outputs.should_continue == 'true' }}
    runs-on: ${{ vars.IS_USING_HOSTED_RUNNERS == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    outputs:
      short_sha: ${{ steps.set_sha.outputs.short_sha }}
      build_type: ${{ github.event.inputs.build_type || 'release' }}
      whats_new: ${{ needs.validate_inputs.outputs.whats_new || '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Create google-services.json from secret
        if: ${{ github.event.inputs.build_type == 'release' || github.event_name != 'workflow_dispatch' }}
        run: |
          mkdir -p app/src/release
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/src/release/google-services.json
          ls -la app/src/release/

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true

      - name: Build APK
        env:
          SKETCHUB_API_KEY: ${{ secrets.SKETCHUB_API_KEY }}
        run: |
          if [ "${{ github.event.inputs.build_type || 'release' }}" == "release" ]; then
            gradle assembleRelease
          else
            gradle assembleDebug
          fi

      - name: Set short SHA
        id: set_sha
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Rename APK with commit hash
        run: |
          if [ "${{ github.event.inputs.build_type || 'release' }}" == "release" ]; then
            mv app/build/outputs/apk/release/app-release.apk \
               app/build/outputs/apk/release/app-release-${{ steps.set_sha.outputs.short_sha }}.apk
          else
            mv app/build/outputs/apk/debug/app-debug.apk \
               app/build/outputs/apk/debug/app-debug-${{ steps.set_sha.outputs.short_sha }}.apk
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.build_type == 'debug' && 'apk-debug' || 'apk-release' }}-${{ steps.set_sha.outputs.short_sha }}
          path: ${{ github.event.inputs.build_type == 'debug' && 'app/build/outputs/apk/debug/app-debug' || 'app/build/outputs/apk/release/app-release' }}-${{ steps.set_sha.outputs.short_sha }}.apk

  aggregateAndSend:
    name: Send APKs to Telegram
    needs: [build, validate_inputs]
    if: ${{ github.event_name != 'workflow_dispatch' || needs.validate_inputs.outputs.should_continue == 'true' }}
    runs-on: ${{ vars.IS_USING_HOSTED_RUNNERS == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.build_type == 'debug' && 'apk-debug' || 'apk-release' }}-${{ needs.build.outputs.short_sha }}
          path: ./downloaded-artifact

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install telethon

      - name: Get Git Commit Info
        run: |
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
          echo "WHATS_NEW=${{ needs.build.outputs.whats_new }}" >> $GITHUB_ENV

      - name: Restore Telegram session cache
        uses: actions/cache@v4
        id: telegram_session_cache
        with:
          path: bot_session.session
          key: telegram-session-${{ runner.os }}-bot_session

      - name: Send APKs to Telegram
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TOPIC_ID: ${{ secrets.TELEGRAM_TOPIC_ID }}
          APK_PATH: ./downloaded-artifact/${{ needs.build.outputs.build_type == 'debug' && 'app-debug' || 'app-release' }}-${{ needs.build.outputs.short_sha }}.apk
          BUILD_TYPE: ${{ needs.build.outputs.build_type }}
          WHATS_NEW: ${{ needs.build.outputs.whats_new }}
        run: |
          python ./.github/workflows/deploy_artifacts.py
        continue-on-error: true